<?php
namespace App\Controller;

use App\Model\ReservationModel;
use App\Model\TableReservationModel;
use Core\Controller\DefaultController;
use Core\Security\Security;

final class ReservationController extends DefaultController
{
    private $model;

    public function __construct()
    {
        $this->model = new ReservationModel();

        parent::__construct(new ReservationModel());
    }

    public function update(int $id, array $data)
    {
        if(!Security::isAuthorized()){
            self::jsonResponse(["description" => "Access Denied"], 401);
            return ;
        }

        $this->model->update($id, $data);

        $reservation = $this->model->find($id);
        $reservation = $this->ReservationJsonEncode($reservation);
        $this->jsonResponse($reservation, 200);
    }

    public function index()
    {
        if(!Security::isAuthorized()){
            self::jsonResponse(["description" => "Access Denied"], 401);
            return ;
        }

        $entities = $this->model->findAll();
        $reservations = [];
        foreach ($entities as $reservation){
            $reservations[] = $this->ReservationJsonEncode($reservation);
        }
        $this->jsonResponse($reservations, 200);
    }

    public function single(int $id)
    {
        $reservation = $this->model->find($id);
        $reservation = $this->ReservationJsonEncode($reservation);
        $this->jsonResponse($reservation, 200);
    }

    public function save(array $data)
    {
        $this->checkContent($data);

        $array = [
            'email' => $data['email'],
            'firstName' => $data['firstName'],
            'lastName' => $data['lastName'],
            'tel' => $data['tel'],
            'nbPoeple' => $data['nbPoeple'],
            'status' => 'prepare'
        ];

        $lastId = $this->model->save($array);

        $this->saveDataReservation('boisson', $data["boissons"], $lastId);
        $this->saveDataReservation('plat', $data["plats"], $lastId);
        $this->saveDataReservation('table', $data["tables"], $lastId);

        $entity = $this->ReservationJsonEncode($this->model->findOneBy(['id' => $lastId]));

        $this->jsonResponse($entity, 201);
    }

    public function delete(int $id)
    {
        if(!Security::isAuthorized()){
            self::jsonResponse(["description" => "Access Denied"], 401);
            return ;
        }

        parent::delete($id); // TODO: Change the autogenerated stub
    }

    private function checkContent(array $data)
    {
        if(!isset($data["email"])
            || !isset($data["firstName"])
            || !isset($data["lastName"])
            || !isset($data["tel"])
            || !isset($data["boissons"])
            || !isset($data["plats"])
            || !isset($data["tables"])
        ){
            throw new \Exception("Bad Request", 404);
        }

        if(empty($data['plats']) && empty($data['boissons'])){
            throw new \Exception("Bad Request", 404);
        }

        if(!empty($data["tables"])){
            if(!isset($data["endDate"]) || !isset($data["startDate"]) || !isset($data["nbPoeple"])){
                throw new \Exception("Bad Request", 404);
            }
        }

        if(count($data["tables"]) > 2){
            throw new \Exception("Bad Request", 404);
        }

        if($data["nbPoeple"] > 8){
            throw new \Exception("Bad Request", 404);
        }

        if($data["nbPoeple"] > 4 && count($data["tables"]) > 1){
            throw new \Exception("Bad Request", 404);
        }
    }

    private function saveDataReservation($name, $data, $reservationId)
    {
        if($name === 'table'){
            foreach ($data["tables"] as $table){
                $endDate = new \DateTime($data['endDate']);
                $startDate = new \DateTime($data['startDate']);

                $data = [
                    'startDate' => date_format($startDate, 'Y-m-d H:i:s'),
                    'endDate' => date_format($endDate, 'Y-m-d H:i:s'),
                    'idTable' => $table,
                    'idReservation' => $reservationId
                ];

                $model = new TableReservationModel();
                $model->save($data);
            }
            return;
        }

        foreach ($data as $entity){
            $data = [
                'id'.ucfirst($name) => $entity['id'],
                'idReservation' => $reservationId,
                'quantity' => $entity['quantity']
            ];

            $modelName = "\App\Model\\".ucfirst($name)."ReservationModel";
            $model = new $modelName();
            $model->save($data);
        }
    }

    private function getPriceTotal(array $data)
    {

        $price = 0;
        $price += $this->getPriceByEntity($data['plats'], 'plat');
        $price += $this->getPriceByEntity($data['boissons'], 'boisson');

        return $price;
    }

    private function getPriceByEntity(array $data, $name)
    {
        $price = 0;
        foreach ($data as $entity){
            $modelName = "\App\Model\\".ucfirst($name)."ReservationModel";
            $model = new $modelName();
            $reservationModel = $model->findOneBy(["id" => $entity["id"]]);

            $methodName = 'getId'.ucfirst($name);
            $entityId = $reservationModel->$methodName();

            $modelName = "\App\Model\\".ucfirst($name)."Model";
            $model = new $modelName();
            $entity = $model->findOneBy(["id" => $entityId]);

            $price += $entity->getPrice() * $reservationModel->getQuantity();
        }
        return $price;
    }

    private function ReservationJsonEncode($reservation){
        $reservation = $reservation->jsonSerialize();
        $boissonReservationModel = new \App\Model\BoissonReservationModel();
        $platReservationModel = new \App\Model\PlatReservationModel();
        $tableReservationModel = new \App\Model\TableReservationModel();

        $reservation['boissons'] = json_decode(json_encode($boissonReservationModel->findBy(['idReservation' => $reservation["id"]])), true);
        $reservation['plats'] = json_decode(json_encode($platReservationModel->findBy(['idReservation' => $reservation["id"]])), true);
        $reservation['tables'] = json_decode(json_encode($tableReservationModel->findBy(['idReservation' => $reservation["id"]])), true);

        $price = $this->getPriceTotal($reservation);
        $reservation['price'] = $price;
        return $reservation;
    }
}